#include "/usr/include/uarm/libuarm.h"
//#include "/usr/include/uarm/ulibuarm.h"
#include "/usr/include/uarm/uARMtypes.h"
#include "/usr/include/uarm/uARMconst.h"
#include "./asl/asl.h"
#include "./pcb/pcb_t.h"
#include "./pcb/const.h"
#include "syscall.h"
int if_increase_priority=0;	//true se il prossimo interrupt dovra' incrementare la priorita'
int increase_priority=0;	//time of the day dell'ultima volta che e' stata increamentata la priorita' 
int if_wait_clock=0;		//true se il prossimo interrupt dovra' sbloccare i processi in wait for clock
int wait_clock=0;		//time of the day dell'ultima volta che e' stato chiamato il clock da 100ms
int *interval_timer=(int*)0x000002E4;	//punta all'interval timer
int clock_rate=0x10000;
int PIPPO=2;
int *RAM_TOP_ADDR=(int*)0x000002D4;
int RAM_TOP=0;
int sem1=0;
int sem2=0;
int CREATEPROCESS=1;
int TERMINATEPROCESS=2;
int SEMP=3;
int SEMV=4;
int debug=0;

state_t *new_interrupt=(state_t*)0x00007058;
//void ** fast_interrupt_pc=0x0000001C;
typedef int* memaddr;
void scheduler(state_t* old,int on_tail){	//se on_tail e' 1, il processo in testa viene messo in coda
	if(debug) tprint("sono lo scheduler!!!\n");
	if(on_tail){
		//tprint("in if(scheduler)!!\n");
		pcb_t* next_proc=removeProcQ(&pcb_wait);
		//stcpy(&(next_proc->p_s),old);
		if(next_proc==0)
			tprint("errore in removeProcQ(scheduler)!!\n");
		//forse va resettata la priorita'
		insertProcQ(&pcb_wait, next_proc);
	}else{
		pcb_t* cur_proc=headProcQ(pcb_wait);
		if(cur_proc==0)
			tprint("next_proc = 0 (scheduler)!!\n");
		else{
			if(old!=0)
				stcpy(&(cur_proc->p_s),old);
			else
				tprint("old = 0 (scheduler)!!\n");
		}
	}
	pcb_t* next_proc=headProcQ(pcb_wait);
	if(next_proc==0)
		tprint("errore in headProcQ(scheduler)!!\n");

	state_t state;
	stcpy(&state,&(next_proc->p_s));
	/*if(state==0)
		tprint("state = 0!");
	else
		tprint("state != 0!");*/
	//tprint("sto per caricare (scheduler)!!\n");
	LDST(&state);
	while(1){
		tprint("blocked in scheduler\n");
	}
	
}
void passup(int type){		//type: 0 se sys, 1 se TLB, 2 se program trap
	state_t *state;
	if(type=0){
		state=(state_t*)SYSBK_OLDAREA;
		stcpy(sys5_sys_old,state);
		LDST(sys5_sys_new);
	}else if(type=1){
		state=(state_t*)TLB_OLDAREA;
		stcpy(sys5_TLB_old,state);
		LDST(sys5_TLB_new);
	}else if(type=2){
		state=(state_t*)PGMTRAP_OLDAREA;
		stcpy(sys5_PGMT_old,state);
		LDST(sys5_PGMT_new);
	}else 
		tprint("error passup!!!!\n");
}
void intHandler(){
	//reimposto il timer al valore corretto

	state_t* old_state=(void*)INT_OLDAREA;
	old_state->pc=old_state->pc+4;
	//prima di tutto salvo lo stato del processo attuale nel suo pcb_t
	pcb_t* cur_proc=headProcQ(pcb_wait);
	stcpy(&(cur_proc->p_s),old_state);
	
	*interval_timer=clock_rate;		
	scheduler((state_t*)INT_OLDAREA,1);
	tprint("scheduler finito!\n");
	while(1){
		tprint("in handler\n");
	}
	/*if(clock_wait){
		
	}else{
		interval_timer=0x0000.02E4;
		//da mettere il caso in cui si dovra' mettere clock_wait=true
		*interval_timer= lock_rate/1000*3;
		scheduler();
	}*/
	
}

void sysHandler(){
	state_t* old_state=(void*)SYSBK_OLDAREA;
	int sysnum=old_state->a1;	//prendo i parametri della syscall
	int a2=old_state->a2;
	int a3=old_state->a3;
	int a4=old_state->a4;
	/*if(sysnum==0 && a2==2 && a3==1 && a4==98)
		tprint("SI (sysHandler)\n");
	else
		tprint("NO (sysHandler)\n");*/
	
	/*if((state_t *)a2==0)
		tprint("a2=0 (sysHandler)\n");
	else
		tprint("a2 != 0 (sysHandler)\n");*/
	
	//prima di tutto salvo lo stato del processo attuale nel suo pcb_t
	pcb_t* cur_proc=headProcQ(pcb_wait);
	stcpy(&(cur_proc->p_s),old_state);

	//gran switch per controllare tutti i casi
	if (sysnum==CREATEPROCESS){
		if(debug) tprint("create process(sysHandler)\n");
		creatProc((state_t *)a2,(int)a3,(void **)a4);
	}else if (sysnum==TERMINATEPROCESS){
		if(debug) tprint("terminate process(sysHandler)\n");
		terminateProc((void *)a2);
	}else if (sysnum==SEMP){
		if(debug) tprint("P (sysHandler)\n");
		P((int *)a2);
	}else if (sysnum==SEMV){
		if(debug) tprint("V (sysHandler)\n");
		V((int *)a2);
	}else if((sysnum>10)&&(sysnum<=20)){	//caso in cui debba essere gestito a livello superiore
		passup(0);
	}else{
		tprint("sysnum non riconosiuta, (sysHandler)\n");
		while(1){}
	}
	scheduler(old_state,1);
	while(1){
		tprint("in sysHandler\n");
	}
	
	/*if(clock_wait){
		
	}else{
		interval_timer=0x0000.02E4;
		//da mettere il caso in cui si dovra' mettere clock_wait=true
		*interval_timer= lock_rate/1000*3;
		scheduler();
	}*/
	
}
void TLBHandler(){
	//passup(1);
	
}
void PGMTHandler(){
	//passup(2);
	
}


void init(){
	
	
}
void programma(){
	
	while(1){
		tprint("in programma\n");
	}
}


void initState(void* state2init, void* hand,int new) {
	state_t* state = (state_t*)state2init;
	state->a1=0;    //r0
	state->a2=0;    //r1
	state->a3=0;    //r2
	state->a4=0;    //r3
	state->v1=0;    //r4
	state->v2=0;    //r5
	state->v3=0;    //r6
	state->v4=0;    //r7
	state->v5=0;    //r8
	state->v6=0;    //r9
	state->sl=0;    //r10
	state->fp=0;    //r11
	state->ip=0;    //r12
	if(new)
		state->sp = RAM_TOP;
	else
		state->sp = RAM_TOP-FRAMESIZE;
	state->lr=0;    //r14
	state->pc = (int)hand;
	if(new)
		state->cpsr = 0 | STATUS_TIMER_ID | STATUS_ID | STATUS_SYS_MODE;// & (~STATUS_TIMER_ID);
	else
		state->cpsr = 0 & ~STATUS_TIMER_ID | STATUS_ID | STATUS_SYS_MODE;
	state->CP15_Control = CP15_DISABLE_VM(state->CP15_Control);
	state->CP15_EntryHi=0;
	state->CP15_Cause=0;
	state->TOD_Hi=0;
	state->TOD_Low=0;
	//STATUS_ALL_INT_DISABLE
	
}
void pippoInutile(){
	//SYSCALL(2,5,0,0);
	
	int j=0;
	while(1){
		tprint("\nquanto e' inutile pippo?\n");
		int i=0;
		while(i<j){
			tprint("molto! ");
			i++;
		}
		/*if(i==3){
			P(sem1);
			
		}*/
		//P(semaddr);
		j++;
	}
	while(1){
		tprint("in pippoInutile finished!!\n");
	}
}
void pippo1(){
	//SYSCALL(2,5,0,0);
	/*tprint("in pippo1 p:\n");
	SYSCALL(SEMP,(int)&sem1,0,0);
	tprint("in pippo1 v:\n");
	SYSCALL(SEMV,(int)&sem2,0,0);
	tprint("in pippo1 p:\n");
	SYSCALL(SEMP,(int)&sem1,0,0);
	tprint("in pippo1 v:\n");
	SYSCALL(SEMV,(int)&sem2,0,0);*/
	while(1){
		tprint("in pippo1 finished!!\n");
	}
}
void pippo2(){
	//SYSCALL(2,5,0,0);
	
	
	tprint("in pippo2 v:\n");
	SYSCALL(SEMV,(int)&sem1,0,0);
	tprint("in pippo2 p:\n");
	SYSCALL(SEMP,(int)&sem2,0,0);
	tprint("in pippo2 v:\n");
	SYSCALL(SEMV,(int)&sem1,0,0);
	tprint("in pippo2 p:\n");
	SYSCALL(SEMP,(int)&sem2,0,0);
	
	while(1){
		tprint("in pippo2 finished!!\n");
	}
}
void create2pippo(){
	int i=0;
	void* pid=0;	//sarebbe pcb_t*
	/*while(i<2){
		i++;
		state_t newState;
		initState(&newState, pippoInutile,0);
		if(CREATEPROCESS(&newState,5,&pid)!=0)
			tprint("error in create process (create2pippo)!!!!!\n");
		
		
		
	}*/
	if((sem1==0)&&(sem2==0))
		tprint("sem inizializzati correttamente (create2pippo)!!!!!\n");
	state_t newState;
	initState(&newState, pippo1,0);
	SYSCALL(CREATEPROCESS,(int)&newState,5,(int)&pid);
	
	initState(&newState, pippo2,0);
	SYSCALL(CREATEPROCESS,(int)&newState,5,(int)&pid);
	
	//if(SYSCALL(CREATEPROCESS,(int)&newState,5,(int)&pid)!=0)
	//	tprint("error in create process (create2pippo)!!!!!\n");		//////
	
	/*TERMINATEPROCESS(pid);
	
	initState(&newState, pippo2,0);
	if(CREATEPROCESS(&newState,5,&pid)!=0)
		tprint("error in create process (create2pippo)!!!!!\n");*/
	/*i=0;
	while(i<20){
		tprint("\n30 i to terminate\n");
		i++;
	}*/
	if(pid==0)
		tprint("pid e' null(create2pippo)!!\n");
	//SYSCALL(2,pid,0,0);
	while(1){
		tprint("\nhello from create2pippo\n");
	}
}
void startingPoint(){
	tprint("hi from starting point\n");
	state_t newState;
	initState(&newState, create2pippo,0);
	void* pid;	//sarebbe pcb_t*
	//SYSCALL(0,2,1,99);
	
	SYSCALL(CREATEPROCESS,(int)&newState,5,(int)&pid);
	while(1){
		//tprint("in while (startingPoint)\n");
	}
}
int main(){	
	pcb_wait=0;
	*interval_timer=clock_rate;
	RAM_TOP=*RAM_TOP_ADDR;
	initPcbs();
	initASL();
	initState((void*)INT_NEWAREA, intHandler,1);
	initState((void*)TLB_NEWAREA, TLBHandler,1);
	initState((void*)PGMTRAP_NEWAREA, PGMTHandler,1);
	initState((void*)SYSBK_NEWAREA, sysHandler,1);
	int i=0;
	/*while(i<20){
		i++;
		tprint("in while (20 iterazioni)\n");
	}*/
	
	//STATUS_ALL_INT_ENABLE
	state_t newState;
	initState(&newState, startingPoint,0);
	void* pid;	//sarebbe pcb_t*
	//SYSCALL(0,2,1,99);
	
	//SYSCALL(CREATEPROCESS,(int)&newState,5,(int)&pid);
	if(creatProc(&newState,5,&pid)!=0)
		tprint("error in create process (main)!!!!!\n");
	scheduler(0,0);
	//LDST(&newState);
	
	tprint("starting!!!!\n");
	//SYSCALL(1,0,0,0);
	tprint("syscall finished!!!!!\n");
	
	while(1){
		tprint("in while (main)\n");
	}
	HALT();

	tprint("error");


return 0;
}
